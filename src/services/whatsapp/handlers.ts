import { Message } from 'whatsapp-web.js';
import { openai } from '../openai';
import { Table } from '../../models/table.model';
import { DynamicRecord } from '../../models/record.model';

export async function handleIncomingMessage(message: Message) {
  const content = message.body.toLowerCase();

  // Paso 1: Verificar si existe la tabla 'clientes'
  let clientesTable = await Table.findOne({ slug: 'clientes' });

  if (!clientesTable) {
    console.log('üìÇ Tabla "clientes" no existe, creando...');
  
    clientesTable = await Table.create({
      name: 'Clientes',
      slug: 'clientes',
      icon: 'users', // o el que prefieras
    });
  
    // üö® Solo crea un primer registro base si realmente es nueva
    await DynamicRecord.create({
      tableSlug: 'clientes',
      customFields: [
        {
          key: 'telefono',
          label: 'Tel√©fono',
          value: '', // se llenar√° despu√©s
          type: 'text',
          visible: true,
        },
      ],
    });
  } else {
    console.log('‚úÖ Tabla "clientes" ya existe, continuando...');
  }

  // Paso 2: Obtener campos din√°micos existentes (desde el primer registro)
  const exampleRecord = await DynamicRecord.findOne({ tableSlug: 'clientes' });
  const fieldTemplate = exampleRecord?.customFields || [];

  const mapData: Record<string, any> = {
    telefono: message.from,
    fuente: 'WhatsApp',
    // podr√≠as agregar m√°s si los capturas del mensaje en el futuro
  };

  const dynamicFields = fieldTemplate.map((field) => ({
    key: field.key,
    label: field.label,
    type: field.type,
    visible: field.visible,
    required: field.required,
    value: mapData[field.key] ?? null,
  }));

  // Paso 3: Crear nuevo registro din√°mico en Mongo
  await DynamicRecord.create({
    tableSlug: 'clientes',
    customFields: dynamicFields,
  });

  // Paso 4: L√≥gica simple
  if (content.includes('ver casa') || content.includes('agendar')) {
    await message.reply('¬°Perfecto! ¬øEn qu√© zona est√°s buscando y cu√°l es tu presupuesto aproximado?');
    return;
  }

  // Paso 5: GPT para casos generales
  const gptPrompt = `Eres un asistente de bienes ra√≠ces. El cliente dijo: "${content}". Resp√≥ndele cordialmente y trata de obtener m√°s informaci√≥n o agendar.`;

  const res = await openai.chat.completions.create({
    model: 'gpt-4',
    messages: [{ role: 'user', content: gptPrompt }],
  });

  const reply = res.choices[0].message?.content || 'No entend√≠ muy bien, ¬øme puedes repetir la informaci√≥n?';
  await message.reply(reply);
}
